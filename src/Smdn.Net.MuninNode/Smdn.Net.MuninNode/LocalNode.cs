// SPDX-FileCopyrightText: 2023 smdn <smdn@smdn.jp>
// SPDX-License-Identifier: MIT
using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;

using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

using Smdn.Net.MuninPlugin;

namespace Smdn.Net.MuninNode;

/// <summary>
/// Implement a <c>Munin-Node</c> that acts as a node on the localhost and only accepts connections from the local loopback address (127.0.0.1, ::1).
/// </summary>
public class LocalNode : NodeBase {
  private const string DefaultHostName = "munin-node.localhost";
  private static readonly int MaxClients = 1;

  public override string HostName { get; }
  public IPEndPoint LocalEndPoint { get; }

  /// <inheritdoc cref="LocalNode(IReadOnlyCollection{IPlugin}, string, int, IServiceProvider)"/>
  public LocalNode(
    IReadOnlyCollection<IPlugin> plugins,
    int port,
    IServiceProvider? serviceProvider = null
  )
    : this(
      plugins: plugins,
      hostName: DefaultHostName,
      port: port,
      serviceProvider: serviceProvider
    )
  {
  }

  /// <summary>
  /// Initializes a new instance of the <see cref="LocalNode"/> class.
  /// </summary>
  /// <param name="plugins">
  /// The collection of plugins provided by this node.
  /// </param>
  /// <param name="hostName">
  /// The hostname advertised by this node. This value is used as the display name for HTML generated by Munin.
  /// </param>
  /// <param name="port">
  /// The port number on which this node accepts connections.
  /// </param>
  /// <param name="serviceProvider">
  /// The <see cref="IServiceProvider"/>.
  /// This constructor overload attempts to get a service of <see cref="ILoggerFactory"/>, to create an <see cref="ILogger"/>.
  /// </param>
  /// <remarks>
  /// Most Munin-Node uses port 4949 by default, but it is recommended to use other port numbers to avoid conflicts with other nodes.
  /// </remarks>
  public LocalNode(
    IReadOnlyCollection<IPlugin> plugins,
    string hostName,
    int port,
    IServiceProvider? serviceProvider = null
  )
    : this(
      pluginProvider: new PluginProvider(plugins ?? throw new ArgumentNullException(nameof(plugins))),
      hostName: hostName,
      port: port,
      serviceProvider: serviceProvider
    )
  {
  }

  /// <summary>
  /// Initializes a new instance of the <see cref="LocalNode"/> class.
  /// </summary>
  /// <param name="pluginProvider">
  /// The <see cref="IPluginProvider"/> that provides <see cref="IPlugin"/>s for this node.
  /// </param>
  /// <param name="hostName">
  /// The hostname advertised by this node. This value is used as the display name for HTML generated by Munin.
  /// </param>
  /// <param name="port">
  /// The port number on which this node accepts connections.
  /// </param>
  /// <param name="serviceProvider">
  /// The <see cref="IServiceProvider"/>.
  /// This constructor overload attempts to get a service of <see cref="ILoggerFactory"/>, to create an <see cref="ILogger"/>.
  /// </param>
  /// <remarks>
  /// Most Munin-Node uses port 4949 by default, but it is recommended to use other port numbers to avoid conflicts with other nodes.
  /// </remarks>
  public LocalNode(
    IPluginProvider pluginProvider,
    string hostName,
    int port,
    IServiceProvider? serviceProvider = null
  )
    : this(
      pluginProvider: pluginProvider ?? throw new ArgumentNullException(nameof(pluginProvider)),
      hostName: hostName,
      port: port,
      logger: serviceProvider?.GetService<ILoggerFactory>()?.CreateLogger<LocalNode>()
    )
  {
  }

  /// <summary>
  /// Initializes a new instance of the <see cref="LocalNode"/> class.
  /// </summary>
  /// <param name="pluginProvider">
  /// The <see cref="IPluginProvider"/> that provides <see cref="IPlugin"/>s for this node.
  /// </param>
  /// <param name="hostName">
  /// The hostname advertised by this node. This value is used as the display name for HTML generated by Munin.
  /// </param>
  /// <param name="port">
  /// The port number on which this node accepts connections.
  /// </param>
  /// <param name="logger">
  /// The <see cref="ILogger"/> to report the situation.
  /// </param>
  /// <remarks>
  /// Most Munin-Node uses port 4949 by default, but it is recommended to use other port numbers to avoid conflicts with other nodes.
  /// </remarks>
  public LocalNode(
    IPluginProvider pluginProvider,
    string hostName,
    int port,
    ILogger? logger = null
  )
    : base(
      pluginProvider: pluginProvider,
      logger: logger
    )
  {
    if (hostName == null)
      throw new ArgumentNullException(nameof(hostName));
    if (hostName.Length == 0)
      throw ExceptionUtils.CreateArgumentMustBeNonEmptyString(nameof(hostName));

    HostName = hostName;

    if (Socket.OSSupportsIPv6) {
      LocalEndPoint = new IPEndPoint(
        address: IPAddress.IPv6Loopback,
        port: port
      );
    }
#pragma warning disable IDE0045
    else if (Socket.OSSupportsIPv4) {
#pragma warning restore IDE0045
      LocalEndPoint = new IPEndPoint(
        address: IPAddress.Loopback,
        port: port
      );
    }
    else {
      throw new NotSupportedException();
    }
  }

  protected override Socket CreateServerSocket()
  {
    Socket? server = null;

    try {
      var endPoint = new IPEndPoint(
        address: Socket.OSSupportsIPv6 ? IPAddress.IPv6Any : IPAddress.Any,
        port: LocalEndPoint.Port
      );

      server = new Socket(
        endPoint.AddressFamily,
        SocketType.Stream,
        ProtocolType.Tcp
      );

      if (endPoint.AddressFamily == AddressFamily.InterNetworkV6 && Socket.OSSupportsIPv4)
        server.DualMode = true;

      server.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReuseAddress, true);
      server.Bind(endPoint);
      server.Listen(MaxClients);

      return server;
    }
    catch {
#pragma warning disable CA1508
      server?.Dispose();
#pragma warning restore CA1508
      throw;
    }
  }

  protected override bool IsClientAcceptable(IPEndPoint remoteEndPoint)
    => IPAddress.IsLoopback(
      (remoteEndPoint ?? throw new ArgumentNullException(nameof(remoteEndPoint))).Address
    );
}
